
int unsigned my_strlen(const char *str)
{
    int i = 0;
    while (str[i] != '\0')
    {
        ++i;
    }
    return i; 
}
char* sp = NULL; /* the start position of the string */
 /*
char* strtok1(char* str, const char* delimiters) {
 
    int i = 0;
    int len = my_strlen(delimiters);
 
    //check in the delimiters 
    if(len == 0)
    {
        
    }
        //printf("delimiters are empty\n");
 
    //if the original string has nothing left 
    if(!str && !sp)
        return NULL;
 
    // initialize the sp during the first call 
    if(str && !sp)
        sp = str;
 
    // find the start of the substring, skip delimiters 
    char* p_start = sp;
    while(1) {
        for(i = 0; i < len; i ++) {
            if(*p_start == delimiters[i]) {
                p_start ++;
                break;
            }
        }
 
        if(i == len) {
               sp = p_start;
               break;
        }
    }
 
    // return NULL if nothing left 
    if(*sp == '\0') {
        sp = NULL;
        return sp;
    }
 
    // find the end of the substring, and
        //replace the delimiter with null 
    while(*sp != '\0') {
        for(i = 0; i < len; i ++) {
            if(*sp == delimiters[i]) {
                *sp = '\0';
                break;
            }
        }
 
        sp ++;
        if (i < len)
            break;
    }
 
    return p_start;
}

*/


char **ft_strsplit(char *s, char c)
{
    char** result    = 0;
    //char *s2=s;
    size_t count     = 0;
    char* tmp        = s;
    char* last_comma = 0;
    char delim[2];
    delim[0] = c;
    delim[1] = 0;

    /* Count how many elements will be extracted. */
    while (*tmp)
    {
        if (c == *tmp)
        {
            count++;
            last_comma = tmp;
        }
        tmp++;
    }

    /* Add space for trailing token. */
    count += last_comma < (s + my_strlen(s) - 1);

    /* Add space for terminating null string so caller
       knows where the list of returned strings ends. */
    count++;

    result = malloc(sizeof(char*) * count);

    if (result)
    {
        size_t idx  = 0;
        char* token = strtok(s, delim);

        while (token)
        {
            assert(idx < count);
            *(result + idx++) = strdup(token);
            token = strtok(0, delim);
        }
        assert(idx == count - 1);
        *(result + idx) = 0;
    }

    return result;
}